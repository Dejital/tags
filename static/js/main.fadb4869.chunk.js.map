{"version":3,"sources":["tags.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["src_tags","App","react_default","a","createElement","className","App_TagGenerator","tags","href","Component","TagGenerator","state","output","numTags","componentDidMount","_this","setRandomTags","setState","getRandomTags","props","inputError","this","htmlFor","onChange","onNumTagsChange","bind","id","type","value","onClick","textareaOnClick","e","currentTarget","select","document","execCommand","count","randomTags","shuffle","length","slice","Math","min","string","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","tag","concat","err","return","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fadb4869.chunk.js","sourcesContent":["export default [\"50mm\",\n\"50mm18\",\n\"50mmf18\",\n\"50mmlens\",\n\"50mmphotography\",\n\"50mmprime\",\n\"alwaystravel\",\n\"alwaystraveling\",\n\"alwaystravelling\",\n\"bangaloreinfluencers\",\n\"bloggerindia\",\n\"bloggersofindia\",\n\"chennaiinfluencers\",\n\"coupleswhotravel\",\n\"couplewhotravel\",\n\"europetravel\",\n\"europetraveller\",\n\"europetravelling\",\n\"europetravels\",\n\"femaleblogger\",\n\"femalebloggers\",\n\"femaletravelblogger\",\n\"femaletravelbloggers\",\n\"followmytravel\",\n\"frenchblogger\",\n\"frenchbloggers\",\n\"getolympusomd\",\n\"global_capture\",\n\"global_creatives\",\n\"global_ladies\",\n\"globecouples\",\n\"globetrotting\",\n\"humanphotography\",\n\"igtravel\",\n\"indiablogger\",\n\"indianbloggers\",\n\"indianinfluencer\",\n\"indiatravelers\",\n\"instatravel\",\n\"italianblogger\",\n\"italianbloggers\",\n\"letsgoeverywhere\",\n\"lovetotravel\",\n\"lovetravel\",\n\"lovetraveling\",\n\"lovetravelling\",\n\"lovetravels\",\n\"micro43\",\n\"micro43photography\",\n\"micro43rds\",\n\"mytravel\",\n\"mytravelcrush\",\n\"mytraveldiaries\",\n\"mytraveldiary\",\n\"mytravelgram\",\n\"mytraveljourney\",\n\"mytravellife\",\n\"mytravelpics\",\n\"mytravels\",\n\"mytravelstory\",\n\"olympus\",\n\"olympusem5mkii\",\n\"olympusomd\",\n\"passionpassport\",\n\"russianblogger\",\n\"russianboy\",\n\"russianboys\",\n\"telugu\",\n\"thetraveltag\",\n\"touris\",\n\"tourisme\",\n\"tourist_lover\",\n\"tourist_pic\",\n\"touriste\",\n\"touristic\",\n\"touristy\",\n\"travelandlife\",\n\"travelblogger\",\n\"travelbuddies\",\n\"travelcouple\",\n\"travelcouplelife\",\n\"travelforlife\",\n\"travelingpost\",\n\"travelinspiration\",\n\"travellife\",\n\"travellifestyle\",\n\"travellingcouple\",\n\"travellingcouples\",\n\"travelpassion\",\n\"travelrealindia\"];","import React, { Component } from 'react';\nimport './App.css';\nimport shuffle from \"shuffle-array\";\nimport tags from \"./tags\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Instagram Tag Generator</h1>\n        <TagGenerator tags={tags} />\n        <footer>\n          <a href=\"http://snevsky.com\">\n            <p>App by Serge Nevsky</p>\n          </a>\n        </footer>\n      </div>\n    );\n  }\n}\n\ninterface TagGeneratorProps {\n  tags: Array<string>\n}\n\nclass TagGenerator extends Component<TagGeneratorProps> {\n  state = {\n    output: \"\",\n    numTags: 30\n  }\n  componentDidMount = () => this.setRandomTags();\n  render() {\n    const inputError = this.state.numTags > 30 || this.state.numTags <= 0;\n    return (\n      <div>\n        <label htmlFor=\"numOfTagsToGenerate\">Number of tags to generate:</label>\n        <input className={inputError ? \"error\" : \"\"} onChange={this.onNumTagsChange.bind(this)} id=\"numOfTagsToGenerate\" type=\"number\" value={this.state.numTags} />\n        <button onClick={this.setRandomTags.bind(this)}>Generate</button>\n        <textarea value={this.state.output} onClick={this.textareaOnClick.bind(this)} />\n      </div>\n    );\n  }\n  private setRandomTags = () => \n    this.setState({ output: getRandomTags(this.props.tags, this.state.numTags) });\n  private onNumTagsChange(e: React.FormEvent<HTMLInputElement>) {\n    this.setState({ numTags: e.currentTarget.value });\n  }\n  private textareaOnClick(e: React.FormEvent<HTMLTextAreaElement>) {\n    e.currentTarget.select();\n    document.execCommand(\"copy\");\n  }\n}\n\nfunction getRandomTags(tags: Array<string>, count: number): string\n{\n  //const randomTags = shuffle.pick(tags, { \"picks\": count });\n  const randomTags = shuffle(tags);\n  if (randomTags.length > 0) {\n    const slice = Math.min(randomTags.length, count);\n    let string = \".\\n.\\n.\\n.\\n.\\n\";\n    for (let tag of randomTags.slice(0, slice)) {\n      string += `#${tag} `;\n    }\n    return string;\n  }\n  return \"\";\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}